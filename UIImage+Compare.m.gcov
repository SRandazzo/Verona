        -:    0:Source:/Users/Sal/Documents/GIT/Verona/Pods/FBSnapshotTestCase/FBSnapshotTestCase/Categories/UIImage+Compare.m
        -:    0:Graph:/Users/Sal/Library/Developer/Xcode/DerivedData/Verona-fgfbmnilklhvdihbxoslbfynjgbp/Build/Intermediates/Pods.build/Debug-iphonesimulator/FBSnapshotTestCase.build/Objects-normal/x86_64/UIImage+Compare.gcno
        -:    0:Data:/Users/Sal/Library/Developer/Xcode/DerivedData/Verona-fgfbmnilklhvdihbxoslbfynjgbp/Build/Intermediates/Pods.build/Debug-iphonesimulator/FBSnapshotTestCase.build/Objects-normal/x86_64/UIImage+Compare.gcda
        -:    0:Runs:16
        -:    0:Programs:1
        -:    1://
        -:    2://  Created by Gabriel Handford on 3/1/09.
        -:    3://  Copyright 2009-2013. All rights reserved.
        -:    4://  Created by John Boiles on 10/20/11.
        -:    5://  Copyright (c) 2011. All rights reserved
        -:    6://  Modified by Felix Schulze on 2/11/13.
        -:    7://  Copyright 2013. All rights reserved.
        -:    8://
        -:    9://  Permission is hereby granted, free of charge, to any person
        -:   10://  obtaining a copy of this software and associated documentation
        -:   11://  files (the "Software"), to deal in the Software without
        -:   12://  restriction, including without limitation the rights to use,
        -:   13://  copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   14://  copies of the Software, and to permit persons to whom the
        -:   15://  Software is furnished to do so, subject to the following
        -:   16://  conditions:
        -:   17://
        -:   18://  The above copyright notice and this permission notice shall be
        -:   19://  included in all copies or substantial portions of the Software.
        -:   20://
        -:   21://  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        -:   22://  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
        -:   23://  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        -:   24://  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
        -:   25://  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
        -:   26://  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        -:   27://  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
        -:   28://  OTHER DEALINGS IN THE SOFTWARE.
        -:   29://
        -:   30:
        -:   31:#import <FBSnapshotTestCase/UIImage+Compare.h>
        -:   32:
        -:   33:// This makes debugging much more fun
        -:   34:typedef union {
        -:   35:    uint32_t raw;
        -:   36:    unsigned char bytes[4];
        -:   37:    struct {
        -:   38:        char red;
        -:   39:        char green;
        -:   40:        char blue;
        -:   41:        char alpha;
        -:   42:    } __attribute__ ((packed)) pixels;
        -:   43:} FBComparePixel;
        -:   44:
        -:   45:@implementation UIImage (Compare)
        -:   46:
        -:   47:- (BOOL)fb_compareWithImage:(UIImage *)image tolerance:(CGFloat)tolerance
        -:   48:{
  2359296:   49:  NSAssert(CGSizeEqualToSize(self.size, image.size), @"Images must be same size.");
        -:   50:  
   589824:   51:  CGSize referenceImageSize = CGSizeMake(CGImageGetWidth(self.CGImage), CGImageGetHeight(self.CGImage));
   589824:   52:  CGSize imageSize = CGSizeMake(CGImageGetWidth(image.CGImage), CGImageGetHeight(image.CGImage));
        -:   53:    
        -:   54:  // The images have the equal size, so we could use the smallest amount of bytes because of byte padding
  1769472:   55:  size_t minBytesPerRow = MIN(CGImageGetBytesPerRow(self.CGImage), CGImageGetBytesPerRow(image.CGImage));
   589824:   56:  size_t referenceImageSizeBytes = referenceImageSize.height * minBytesPerRow;
   589824:   57:  void *referenceImagePixels = calloc(1, referenceImageSizeBytes);
   589824:   58:  void *imagePixels = calloc(1, referenceImageSizeBytes);
        -:   59:
  1179648:   60:  if (!referenceImagePixels || !imagePixels) {
    #####:   61:    free(referenceImagePixels);
    #####:   62:    free(imagePixels);
    #####:   63:    return NO;
        -:   64:  }
        -:   65:  
  1179648:   66:  CGContextRef referenceImageContext = CGBitmapContextCreate(referenceImagePixels,
   589824:   67:                                                             referenceImageSize.width,
   589824:   68:                                                             referenceImageSize.height,
   589824:   69:                                                             CGImageGetBitsPerComponent(self.CGImage),
   589824:   70:                                                             minBytesPerRow,
   589824:   71:                                                             CGImageGetColorSpace(self.CGImage),
        -:   72:                                                             (CGBitmapInfo)kCGImageAlphaPremultipliedLast
        -:   73:                                                             );
  1179648:   74:  CGContextRef imageContext = CGBitmapContextCreate(imagePixels,
   589824:   75:                                                    imageSize.width,
   589824:   76:                                                    imageSize.height,
   589824:   77:                                                    CGImageGetBitsPerComponent(image.CGImage),
   589824:   78:                                                    minBytesPerRow,
   589824:   79:                                                    CGImageGetColorSpace(image.CGImage),
        -:   80:                                                    (CGBitmapInfo)kCGImageAlphaPremultipliedLast
        -:   81:                                                    );
        -:   82:
  1179648:   83:  if (!referenceImageContext || !imageContext) {
    #####:   84:    CGContextRelease(referenceImageContext);
    #####:   85:    CGContextRelease(imageContext);
    #####:   86:    free(referenceImagePixels);
    #####:   87:    free(imagePixels);
    #####:   88:    return NO;
        -:   89:  }
        -:   90:
   589824:   91:  CGContextDrawImage(referenceImageContext, CGRectMake(0, 0, referenceImageSize.width, referenceImageSize.height), self.CGImage);
   589824:   92:  CGContextDrawImage(imageContext, CGRectMake(0, 0, imageSize.width, imageSize.height), image.CGImage);
        -:   93:
   589824:   94:  CGContextRelease(referenceImageContext);
   589824:   95:  CGContextRelease(imageContext);
        -:   96:
   589824:   97:  BOOL imageEqual = YES;
        -:   98:
        -:   99:  // Do a fast compare if we can
   589824:  100:  if (tolerance == 0) {
   589824:  101:    imageEqual = (memcmp(referenceImagePixels, imagePixels, referenceImageSizeBytes) == 0);
   589824:  102:  } else {
        -:  103:    // Go through each pixel in turn and see if it is different
    #####:  104:    const NSInteger pixelCount = referenceImageSize.width * referenceImageSize.height;
        -:  105:
    #####:  106:    FBComparePixel *p1 = referenceImagePixels;
    #####:  107:    FBComparePixel *p2 = imagePixels;
        -:  108:
    #####:  109:    NSInteger numDiffPixels = 0;
    #####:  110:    for (int n = 0; n < pixelCount; ++n) {
        -:  111:      // If this pixel is different, increment the pixel diff count and see
        -:  112:      // if we have hit our limit.
    #####:  113:      if (p1->raw != p2->raw) {
    #####:  114:        numDiffPixels ++;
        -:  115:
    #####:  116:        CGFloat percent = (CGFloat)numDiffPixels / pixelCount;
    #####:  117:        if (percent > tolerance) {
    #####:  118:          imageEqual = NO;
    #####:  119:          break;
        -:  120:        }
    #####:  121:      }
        -:  122:
    #####:  123:      p1++;
    #####:  124:      p2++;
    #####:  125:    }
        -:  126:  }
        -:  127:
   589824:  128:  free(referenceImagePixels);
   589824:  129:  free(imagePixels);
        -:  130:
   589824:  131:  return imageEqual;
   589824:  132:}
        -:  133:
        -:  134:@end

/Users/Sal/Documents/GIT/Verona/VeronaTests/VeronaTests.swift:
       |    1|//
       |    2|//  VeronaTests.swift
       |    3|//  VeronaTests
       |    4|//
       |    5|//  Created by Salvatore Randazzo on 6/3/15.
       |    6|//  Copyright (c) 2015 Salvatore Randazzo. All rights reserved.
       |    7|//
       |    8|
       |    9|import UIKit
       |   10|import XCTest
       |   11|import Verona
       |   12|import FBSnapshotTestCase
       |   13|
       |   14|class VeronaTests: FBSnapshotTestCase {
       |   15|    
     18|   16|    override func setUp() {
     18|   17|        super.setUp()
     18|   18|        recordMode = false
     18|   19|    }
       |   20|    
      1|   21|    func testItCreatesFontsCorrectly() {
      1|   22|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|   23|            make.setAttribute(.Font(UIFont(name: "Optima-ExtraBlack", size: 18)!))
      1|   24|        }
      1|   25|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|   26|    }
       |   27|    
      1|   28|    func testItCreatesParagraphStyleCorrectly() {
      1|   29|        
      1|   30|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|   31|            let paragraph = NSMutableParagraphStyle()
      1|   32|            paragraph.alignment = .Right
      1|   33|            paragraph.lineSpacing = 20
      1|   34|            paragraph.lineBreakMode = NSLineBreakMode.ByCharWrapping
      1|   35|            make.setAttribute(.ParagraphStyle(paragraph))
      1|   36|        }
      1|   37|        let label = wrapAsLabel(string)
      1|   38|        label.frame.size = CGSize(width: 75, height: 100)
      1|   39|        label.numberOfLines = 0
      1|   40|        FBSnapshotVerifyLayer(label.layer)
      1|   41|    }
       |   42|    
       |   43|    
      1|   44|    func testItCreatesColorCorrectly() {
      1|   45|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|   46|            make.setAttribute(.Color(UIColor.blueColor()))
      1|   47|        }
      1|   48|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|   49|    }
       |   50|    
      1|   51|    func testItCreatesBackgroundColorCorrectly() {
      1|   52|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|   53|            make.setAttribute(.BackgroundColor(UIColor.lightGrayColor()))
      1|   54|        }
      1|   55|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|   56|    }
       |   57|    
      1|   58|    func testLigature() {
      1|   59|        
      1|   60|        let string = "Ciao, Verona. Un CaffÃ©?"
      1|   61|        let zapfino = UIFont(name: "Zapfino", size: 24) as UIFont!
      1|   62|        //Demonstrate no ligature vs ligature. Ligature is the joining of certain characters, such as 'ff'
      1|   63|        let ligatureString = NSAttributedString.make(string) { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|   64|            make.setAttribute(.Ligature(true))
      1|   65|            make.setAttribute(.Font(zapfino))
      1|   66|        }
      1|   67|        
      1|   68|        let noLigatureString = NSAttributedString.make(string) { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|   69|            make.setAttribute(.Ligature(false))
      1|   70|            make.setAttribute(.Font(zapfino))
      1|   71|        }
      1|   72|        
      1|   73|        let ligatureLabel = wrapAsLabel(ligatureString)
      1|   74|        let noLigatureLabel = wrapAsLabel(noLigatureString)
      1|   75|        let container = UIView(frame: CGRect(origin: CGPointZero, size: CGSize(width: ligatureLabel.frame.width, height: ligatureLabel.frame.height + noLigatureLabel.frame.height)))
      1|   76|        
      1|   77|        container.addSubview(ligatureLabel)
      1|   78|        noLigatureLabel.frame.offsetInPlace(dx: 0, dy: ligatureLabel.frame.height)
      1|   79|        container.addSubview(noLigatureLabel)
      1|   80|        
      1|   81|        FBSnapshotVerifyLayer(container.layer)
      1|   82|    }
       |   83|    
      1|   84|    func testItKerns() {
      1|   85|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|   86|            make.setAttribute(.Kerning(22))
      1|   87|        }
      1|   88|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|   89|    }
       |   90|
      1|   91|    func testItStrikeThroughs() {
      1|   92|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|   93|            make.setAttribute(.Strikethrough(NSUnderlineStyle.StyleSingle))
      1|   94|        }
      1|   95|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|   96|    }
       |   97|
      1|   98|    func testItUnderlines() {
      1|   99|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  100|            make.setAttribute(.UnderlineStyle(NSUnderlineStyle.StyleSingle))
      1|  101|        }
      1|  102|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  103|    }
       |  104|    
      1|  105|    func testItStrokes() {
      1|  106|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  107|            make.setAttribute(.StrokeColor(UIColor.redColor()))
      1|  108|            make.setAttribute(.StrokeWidth(4))
      1|  109|        }
      1|  110|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  111|    }
       |  112|    
      1|  113|    func testItShadows() {
      1|  114|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  115|            let shadow = NSShadow()
      1|  116|            shadow.shadowColor = UIColor.redColor()
      1|  117|            shadow.shadowBlurRadius = 8
      1|  118|            make.setAttribute(.Shadow(shadow))
      1|  119|        }
      1|  120|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  121|    }
       |  122|
      1|  123|    func testItsTextEffects() {
      1|  124|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  125|            make.setAttribute(.TextEffect(NSTextEffectAttributeStyle.LetterPressStyle))
      1|  126|        }
      1|  127|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  128|    }
       |  129|    
       |  130|//    func testAttachments() {
       |  131|//        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
       |  132|//            let attachment = NSTextAttachment(data: <#NSData?#>, ofType: <#String?#>)
       |  133|//            make.setAttribute(.TextEffect(NSTextEffectAttributeStyle.LetterPressStyle))
       |  134|//        }
       |  135|//        FBSnapShotVerifyLayer(wrap(string).layer)
       |  136|//    }
       |  137|    
      1|  138|    func testLinks() {
      1|  139|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  140|            make.setAttribute(.Link(NSURL(string: "www.cocoapods.org")!))
      1|  141|        }
      1|  142|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  143|    }
       |  144|    
      1|  145|    func testStringLinks() {
      1|  146|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  147|            make.setAttribute(.LinkAsString("www.cocoapods.org"))
      1|  148|        }
      1|  149|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  150|    }
       |  151|    
       |  152|    
      1|  153|    func testBaseLineOffset() {
      1|  154|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  155|            make.setAttribute(.BaseLineOffset(10))
      1|  156|        }
      1|  157|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  158|    }
       |  159|    
       |  160|    
      1|  161|    func testItUnderlinesWithColors() {
      1|  162|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  163|            make.setAttribute(.UnderlineStyle(NSUnderlineStyle.StyleSingle))
      1|  164|            make.setAttribute(.UnderlineColor(UIColor.redColor()))
      1|  165|        }
      1|  166|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  167|    }
       |  168|    
      1|  169|    func testItStrikeThroughsWithColor() {
      1|  170|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  171|            make.setAttribute(.Strikethrough(NSUnderlineStyle.StyleSingle))
      1|  172|            make.setAttribute(.StrikethroughColor(UIColor.redColor()))
      1|  173|        }
      1|  174|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  175|    }
       |  176|    
      1|  177|    func testItsObliqueness() {
      1|  178|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  179|            make.setAttribute(.Obliqueness(2))
      1|  180|        }
      1|  181|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  182|    }
       |  183|    
      1|  184|    func testItsExpansion() {
      1|  185|        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
      1|  186|            make.setAttribute(.Expansion(2))
      1|  187|        }
      1|  188|        FBSnapshotVerifyLayer(wrapAsLabel(string).layer)
      1|  189|    }
       |  190|
       |  191|    //TODO: Unsure how to test/use writing direction
       |  192|//    func testItsWritingDirection() {
       |  193|//        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
       |  194|//            make.setAttribute(.WritingDirection([NSTextWritingDirection.Override]))
       |  195|//        }
       |  196|//        FBSnapShotVerifyLayer(wrap(string).layer)
       |  197|//    }
       |  198|    
       |  199|    //TODO: Unsure how to test/use GlyphForm
       |  200|//    func testItsVerticalGlyphForm() {
       |  201|//        let string = NSAttributedString.make("Ciao, Verona") { (make: NSAttributedStringAttributeBuilder) -> Void in
       |  202|//            make.setAttribute(.VerticalGlyphForm(VerticalGlyphFormDirection.Horizontal))
       |  203|//        }
       |  204|//        FBSnapShotVerifyLayer(wrap(string).layer)
       |  205|//    }
       |  206|  
       |  207|    //Helper for snapshot tests
     19|  208|    func wrapAsLabel(string: NSAttributedString) -> UILabel {
     19|  209|        let label = UILabel()
     19|  210|        label.attributedText = string
     19|  211|        label.backgroundColor = UIColor.whiteColor()
     19|  212|        label.sizeToFit()
     19|  213|        return label
     19|  214|    }
       |  215|}
